<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>STUN/TURN Server Management</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 100 100 !important;
        background-color: #f4f4f9;
        color: #333;
      }

      h1 {
        text-align: center;
        margin: 20px 0;
        color: #2c3e50;
      }

      h2 {
        color: #34495e;
      }

      #server-list {
        list-style: none;
        padding: 0;
      }

      #server-list li {
        background: #ffffff;
        margin: 10px 0;
        padding: 10px 15px;
        border-radius: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
      }

      #server-list li button {
        margin-left: 10px;
        padding: 5px 10px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-size: 14px;
      }

      #server-list li button.delete {
        background-color: #e74c3c;
        color: white;
      }

      #server-list li button.edit {
        background-color: #3498db;
        color: white;
      }

      #add-server-form {
        background: #ffffff;
        padding: 20px;
        margin: 20px auto;
        max-width: 500px;
        border-radius: 5px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
      }

      #add-server-form input {
        display: block;
        width: calc(100% - 20px);
        margin: 10px auto;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 3px;
      }

      #add-server-form button {
        background-color: #2ecc71;
        color: white;
        font-size: 16px;
        padding: 10px 15px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        display: block;
        margin: 10px auto;
      }

      #add-server-form button:hover {
        background-color: #27ae60;
      }

      #add-server-form button:active {
        background-color: #1e8449;
      }
    </style>
  </head>
  <body>
    <h1>STUN/TURN Server Management</h1>

    <div>
      <h2>Current Servers</h2>
      <ul id="server-list"></ul>
    </div>

    <div>
      <h2>Add New Server</h2>
      <form id="add-server-form">
        <input type="text" id="server-url" placeholder="Server URL" required />
        <input type="text" id="username" placeholder="Username" />
        <input type="text" id="credential" placeholder="Credential" />
        <button type="submit">Add Server</button>
      </form>
    </div>

    <script>
      const serverList = document.getElementById("server-list");
      const addServerForm = document.getElementById("add-server-form");
      const serverUrlInput = document.getElementById("server-url");
      const usernameInput = document.getElementById("username");
      const credentialInput = document.getElementById("credential");

      // Function to fetch and update server list
      const fetchServerList = async () => {
        const response = await fetch("/api/ice-servers");
        const iceServers = await response.json();
        updateServerList(iceServers);
      };

      // Function to update server list on the UI
      const updateServerList = (iceServers) => {
        serverList.innerHTML = "";
        iceServers.forEach((server, index) => {
          const li = document.createElement("li");
          li.textContent = `Server: ${server.urls} | Username: ${
            server.username || "N/A"
          } | Credential: ${server.credential || "N/A"}`;

          const deleteButton = document.createElement("button");
          deleteButton.textContent = "Delete";
          deleteButton.className = "delete";
          deleteButton.onclick = () => deleteServer(index);

          const editButton = document.createElement("button");
          editButton.textContent = "Edit";
          editButton.className = "edit";
          editButton.onclick = () => editServer(index, server);

          li.appendChild(editButton);
          li.appendChild(deleteButton);
          serverList.appendChild(li);
        });
      };

      // Add new server
      addServerForm.onsubmit = async (event) => {
        event.preventDefault();
        const newServer = {
          urls: serverUrlInput.value,
          username: usernameInput.value || undefined,
          credential: credentialInput.value || undefined,
        };

        await fetch("/api/ice-servers", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(newServer),
        });

        serverUrlInput.value = "";
        usernameInput.value = "";
        credentialInput.value = "";
        fetchServerList(); // Refresh list after adding
      };

      // Delete server
      const deleteServer = async (index) => {
        await fetch(`/api/ice-servers/${index}`, { method: "DELETE" });
        fetchServerList(); // Refresh list after deleting
      };

      // Edit server
      const editServer = async (index, server) => {
        const newUrl = prompt("Enter new URL", server.urls);
        if (newUrl === null) return; // Handle cancel

        const newUsername = prompt("Enter new username", server.username || "");
        if (newUsername === null) return; // Handle cancel

        const newCredential = prompt(
          "Enter new credential",
          server.credential || ""
        );
        if (newCredential === null) return; // Handle cancel

        const updatedServer = {
          urls: newUrl,
          username: newUsername,
          credential: newCredential,
        };
        if (!updatedServer.username) {
          delete updatedServer.username;
        }
        if (!updatedServer.credential) {
          delete updatedServer.credential;
        }

        await fetch(`/api/ice-servers/${index}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(updatedServer),
        });

        fetchServerList(); // Refresh list after editing
      };

      // Initial fetch of the server list
      fetchServerList();
    </script>
  </body>
</html>
